Texture2DArray g_Texture;
SamplerState   g_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix

struct PSInput
{
    float4 Pos      : SV_POSITION;
    float2 UV       : TEX_COORD;
    float  TexIndex : TEX_ARRAY_INDEX;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    const float NumTextures = 3.0;

    float2 SplatUV   = float2(PSIn.UV.x / NumTextures, PSIn.UV.y); 
    float2 TexA_UV   = float2((PSIn.UV.x / NumTextures) + (1.0 / NumTextures), PSIn.UV.y);
    float2 TexB_UV   = float2((PSIn.UV.x / NumTextures) + (2.0 / NumTextures), PSIn.UV.y);

    float4 SplatMap = g_Texture.Sample(g_Texture_sampler, float3(SplatUV, PSIn.TexIndex));
    float4 TexA     = g_Texture.Sample(g_Texture_sampler, float3(TexA_UV, PSIn.TexIndex));
    float4 TexB     = g_Texture.Sample(g_Texture_sampler, float3(TexB_UV, PSIn.TexIndex));

    float4 Color = (SplatMap.b * TexA) + (SplatMap.g * TexB);

#if CONVERT_PS_OUTPUT_TO_GAMMA
    Color.rgb = pow(Color.rgb, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif
    PSOut.Color = Color;
}
